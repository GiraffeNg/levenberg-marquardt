package com.nus.cubic;

/**
 * Created by duy on 1/2/15.
 */

import com.nus.LmSumSquaresError;
import com.nus.LmSolver;

/**
 * Task: Suppose the true model is f(x) = -x^3 + 2 * x^2 - 3 * x + 4
 *
 * Given the set of points generated by f(x) = -x^3 + 2 * x^2 - 3 * x + 4 with
 * some noise, use Levenberg-Marquardt algorithm to find the model to fit
 * all the points.
 */
public class Main {
  public static void main(String[] args) {
    double[][] xy = {
      {0.0, 0.2}, {1.0, -1.99}, {1.5, -3.375}, {-2, 22.02}, {3, -18.0}
    };

    int numData = xy.length;
    double x[] = new double[numData];
    double y[] = new double[numData];
    for (int i = 0; i < numData; ++i) {
      x[i] = xy[i][0];
      y[i] = xy[i][1];
    }

    ModelCubicFunction model = new ModelCubicFunction(x, y);
    LmSumSquaresError errorFunc = new LmSumSquaresError(model);

    LmSolver lmSolver = new LmSolver(0.001, 300, 0.00000001, errorFunc);

    double abc[] = {8, -10, 4};
    lmSolver.solve(abc);

    System.out.println("Result: ");
    System.out.println(abc[0]);
    System.out.println(abc[1]);
    System.out.println(abc[2]);
  }
}
